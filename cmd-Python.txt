================ otros ====================================	
\'  --> para agregar la commilla 	
global name_variable   # para usar una variable en la función que esta por fuera de ella.

id('i') --> ubicación en memoria

dir (pais)  --> muestra los métodos del string
help (myfunction) -->ayuda de las triple comillas de la funcion

pass --> placeholder
print ('el cliente: {} no se encuentra en la lista'.format(client_name))

sys.exit()  -->import sys
import copy
import random -->num aleatorios
help (a) -->""" comentarios de ayuda"""

import this   --> zen de python
================ Funciones ====================================
#funciones
type (1)
int ('5')
bool('1')
================Funcion====================================
def suma_de_dos_num(x,y):
	"""Este es un texto de ayuda de como utilizar la funcion"""
	return x + y
	
funcion lambda o anónima
lambda argumentos: expresion



================ Strings-cadenas ====================================	

pais = 'Colombia'
pais[0]
pais[-1]

len(pais)

in 
not in

upper 
lower
find
startswith
endswith
capitalize
replace

pais.upper()

------slices ------
pais [0:3]  --> Col
pais [::2]  --> 
pais [:3]  -->Col
pais [3:]  -->ombia

pais [::-1]  --> aibmoloc

pais [:8:2] --> clmbi -->de dos en dos hasta el 8
pais [::2] --> clmbi -->de dos en dos hasta el final

------split------
lista = pais.split(',') --> separador por coma


================ for loops ====================================	
--itera en una secuencia

break    -->rompe la iteracion
continue -->pasar a la siguiente iteracion


for i in range(100):
	print (i)

================ while loops ====================================	
--itera mientras una condicion sea verdadera
-- o en una secuencia.


================ Listas ====================================	
-->las listas son mutables los strings no
--> se inician con [] o con list
--> solo puedo usar suma y multiplicacion

countries = ['Mexico', 'Colombia']

global_countries = countries -->si modifico una lista, se modifica la otra.

global_countries = copy.copy(countries) -->De esta manera copio una lista, llamar a la libreria copy.

global_countries = countries[::] -->otra forma de copiar, clonar una lista.

global_countries = countries.copy() -->otra forma

suma -->concatena en las listas.

a.append(2) -->agrega
a.pop()     --> saca de la lista
a.sort()    --> ordena de menor a mayor

del a [-1]  --> elimina el ultimo elemento
a.remove ('name') -->elimina sin saber el indice

a = list (range(0,100,2))  

random_number.append (random.randint(0,15))
order_numbers = sorted(random_numbers)

--------- para enumerar con indice la lista ----
for idx, client in enumerate (clients):
	print ('{}: {}'.format(idx, client))

================ Diccionarios ====================================	
--> keys y values
--> se inician con {} o con dict

rae.get ('helado', None)  -->para que no de error y de none cuando no encuentre nada
rae.keys()
rae.values()
rae.items()  

for key, values in rae.items():
	print(key,values)



================ tuplas y conjuntos ====================================	
--> tuplas son similares a las listas pero inmutables.
--> para regresar mas de un valor en una función.

-->conjuntos: sets
--> no pueden existir elemnos duplicados y son mutables.
--> set y {} para declararlos
--> no tienen indice  porque no tienen un orden implícito.


--------------

>>> A = {1, 2, 3}	# conjunto A
>>> B = {3, 4 ,5}	# conjunto B
>>> A | B		#unión
{1, 2, 3, 4, 5}
>>> A & B	# intersección
{3}
>>> A - B		# diferencia entre A y B
{1, 2}
>>> B - A		# diferencia entre B y A
{4, 5}
================ Comprehensions ====================================	
lista_numeros = list(range(100))
lista_numeros
pares = [num for num in lista_numero if num % 2 == 0]
pares
dobles = [i * 2 for i in lista_numeros]
dobles

a =[1,2,3] 
b = [a,b,c] 
c = {uid: a for uid, a in zip (a,b)}

List comprehensions
[element for element in element_list if element_meets_condition]
Dictionary comprehensions
{key: element for element in element_list if element_meets_condition}
Sets comprehensions
{element for element in element_list if elements_meets_condition}
-------
import random
random_numbers=[]
for i in range (10):
	random_numbers.append(random.randint (1,3))

random_numbers
no_repeated = {number for number in random_numbers}	
---------

if __name__ == '__main__':
	data = [random.randint(0,100) for i in range (10)]
	
	data.sort()
	
	print (data)

================ zip ====================================	

>>> x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> zipped = zip(x, y)
>>> list(zipped)
[(1, 4), (2, 5), (3, 6)]


================ Archivos ====================================	






================ PROGRAMACION ORIENTADA A OBJETOS POO ====================================	


================  Scopes and namespaces ====================================	
--names
def echo(value):
    return value

a = echo

a(‘Billy’)

-->scope: Campo de aplicación u alcance.


================ Recursividad ====================================	
def fibonacci(n):
    if n == 0 or n == 1:
        return 1

    return fibonacci(n - 1) + fibonacci(n - 2)


================ funcion lambda =======================

sumar = lambda x, y: x + y

>>> sumar(2, 3)
5

==================== Función de order superior=====================

Es una función que recibe como parámetro a otra función.

FILTER MAP REDUCE

# filter.
my_list = [1,4,5, 6, 9, 13, 21]

--sacar los impares

-->con list comprehensions 
odd = [i for i in my_list if i %2 !=0]

--> con filter
odd = list(filter(lambda x: x%2 !=0, mylist))

print(odd) 

----------------------------------------------
#map 
my_list = [1,2,3,4,5]

--sacar los cuadrados de los números.

-->con list comprehensions 
squares = [i*i for i in my_list ]

--> con filter
squares = list(map(lambda x: x**2, mylist))

----------------------------------------------
#reduce
my_list = [2,2,2,2,2]

--sacar la multiplicacion de los elementos de la lista.

from functools import reduce

all_multiplied = reduce (lambda a,b: a*b, my_list)

 


========= OTROS ================================
yield 
funcion lambda  --> funciones anonimas
collections
comprehensions

decoradores
Scopes and namespaces

assert

try 
except
finnaly